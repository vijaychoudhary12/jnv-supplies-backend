const express = require('express');
const cors = require('cors');
const mongoose = require('mongoose');
const path = require('path');
const mongoSanitize = require('express-mongo-sanitize'); // For sanitization
const xss = require('xss-clean'); // For XSS protection
const rateLimit = require('express-rate-limit'); // For API rate limiting
require('dotenv').config(); // Load environment variables

const app = express();
const PORT = process.env.PORT || 5000; // Use PORT from .env or default to 5000

// MongoDB Atlas Connection
mongoose.connect(process.env.MONGODB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
  // Optional: Add other connection options if needed, e.g., serverSelectionTimeoutMS
})
  .then(() => console.log('MongoDB Atlas connected'))
  .catch(err => {
    console.error('MongoDB Atlas connection error:', err);
    // Exit process with failure
    process.exit(1);
  });

// --- Middleware ---
// CORS Middleware - allow requests from your frontend
app.use(cors({
  origin: process.env.FRONTEND_URL || 'http://localhost:3000', // Allow specific frontend URL
  credentials: true, // Allow cookies to be sent
}));

// Body Parser Middleware - allows parsing of JSON request bodies
app.use(express.json({ limit: '10kb' })); // Limit body size

// Data Sanitization against NoSQL Query Injection
app.use(mongoSanitize());

// Data Sanitization against XSS attacks
app.use(xss());

// Rate Limiting to prevent brute-force attacks
const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // Limit each IP to 100 requests per windowMs
  message: 'Too many requests from this IP, please try again after 15 minutes',
});
// Apply to all API requests
app.use('/api/', apiLimiter);

// Serve static files from the React frontend in production
if (process.env.NODE_ENV === 'production') {
  app.use(express.static(path.join(__dirname, '../../jnv-supplies-frontend/build')));
}

// --- Mongoose Schemas & Models ---
// Note: Keeping _id as String as per your existing schema.
// Added 'timestamps: true' for createdAt and updatedAt fields automatically.

const schoolSchema = new mongoose.Schema({
  name: { type: String, required: true, trim: true, unique: true },
  state: { type: String, required: true, trim: true },
  district: { type: String, required: true, trim: true },
}, { timestamps: true }); // Automatically adds createdAt and updatedAt

const tenderSchema = new mongoose.Schema({
  tender_id: { type: String, required: true, trim: true, unique: true },
  description: { type: String, trim: true }, // Added for detail
  category: { type: String, trim: true }, // Added for filtering
  deadline: { type: Date, required: true }, // Changed to Date type
  status: { type: String, required: true, enum: ['Open', 'Closed', 'Awarded', 'Cancelled'], default: 'Open' },
  // Optional: Add school reference later if needed
}, { timestamps: true });

const productSchema = new mongoose.Schema({
  item: { type: String, required: true, trim: true, unique: true },
  category: { type: String, required: true, trim: true },
  price: { type: Number, required: true, min: 0 },
  quantity: { type: Number, required: true, min: 0, default: 0 },
  description: { type: String, trim: true }, // Added for detail
}, { timestamps: true });

const bidSchema = new mongoose.Schema({
  tender_id: { type: mongoose.Schema.Types.ObjectId, ref: 'Tender', required: true }, // Reference Tender
  vendor_id: { type: mongoose.Schema.Types.ObjectId, ref: 'Vendor', required: true }, // Reference Vendor
  amount: { type: Number, required: true, min: 0 },
  date: { type: Date, default: Date.now }, // Changed to Date type
  status: { type: String, required: true, enum: ['Submitted', 'Accepted', 'Rejected', 'Pending'], default: 'Submitted' },
  // Optional: tender_ref_string: { type: String, required: true }, // To store human-readable tender_id for easy display
}, { timestamps: true });

const vendorSchema = new mongoose.Schema({
  name: { type: String, required: true, trim: true, unique: true },
  contact_person: { type: String, trim: true }, // Added for detail
  email: { type: String, trim: true, match: [/^\S+@\S+\.\S+$/, 'Please use a valid email address'] },
  phone: { type: String, trim: true },
  address: { type: String, trim: true },
  services_offered: [{ type: String, trim: true }], // Array of strings
  status: { type: String, enum: ['Active', 'Inactive', 'On Hold'], default: 'Active' },
}, { timestamps: true });

const logisticsSchema = new mongoose.Schema({
  provider: { type: String, required: true, trim: true, unique: true },
  contact_person: { type: String, trim: true },
  email: { type: String, trim: true, match: [/^\S+@\S+\.\S+$/, 'Please use a valid email address'] },
  phone: { type: String, trim: true },
  service_areas: [{ type: String, trim: true }],
  cost_per_km: { type: Number, min: 0 },
  status: { type: String, enum: ['Active', 'Inactive'], default: 'Active' },
}, { timestamps: true });

const contactSchema = new mongoose.Schema({
  name: { type: String, required: true, trim: true },
  role: { type: String, required: true, trim: true }, // e.g., 'Principal', 'NVS Official', 'Vendor Contact'
  email: { type: String, trim: true, match: [/^\S+@\S+\.\S+$/, 'Please use a valid email address'], unique: true },
  phone: { type: String, trim: true },
  organization: { type: String, trim: true }, // e.g., School name, Vendor name
}, { timestamps: true });


const School = mongoose.model('School', schoolSchema);
const Tender = mongoose.model('Tender', tenderSchema);
const Product = mongoose.model('Product', productSchema);
const Bid = mongoose.model('Bid', bidSchema);
const Vendor = mongoose.model('Vendor', vendorSchema);
const Logistics = mongoose.model('Logistics', logisticsSchema);
const Contact = mongoose.model('Contact', contactSchema);

// --- Reusable Utility for Querying (Pagination, Sorting, Filtering) ---
const applyQueryParams = (model, req) => {
  let query = {};
  let sort = {};
  let pagination = {};

  // Filtering/Searching
  const { search, ...filters } = req.query; // 'search' for general search, 'filters' for exact matches
  if (search) {
    const searchRegex = new RegExp(search, 'i'); // Case-insensitive search
    const searchableFields = Object.keys(model.schema.paths).filter(
      key => model.schema.paths[key].instance === 'String' || model.schema.paths[key].instance === 'Number'
    );
    // Build OR query for searchable string fields
    query.$or = searchableFields.map(field => ({ [field]: searchRegex }));
  }

  // Exact match filters (e.g., /api/tenders?status=Open)
  for (const key in filters) {
    if (model.schema.paths[key]) { // Check if field exists in schema
      query[key] = filters[key];
    }
  }

  // Sorting
  const { sortField, sortOrder } = req.query; // e.g., ?sortField=name&sortOrder=asc
  if (sortField && ['asc', 'desc'].includes(sortOrder)) {
    sort[sortField] = sortOrder === 'asc' ? 1 : -1;
  } else {
    // Default sort by creation date
    sort.createdAt = -1;
  }

  // Pagination
  const page = parseInt(req.query.page) || 1;
  const limit = parseInt(req.query.limit) || 10;
  const skip = (page - 1) * limit;

  pagination = { skip, limit, page, totalPages: 0, totalItems: 0 };

  return { query, sort, pagination };
};

// --- API Routes ---

// Generic success response handler
const sendSuccessResponse = (res, data, message = 'Success') => {
  res.status(200).json({ success: true, message, data });
};

// Generic error response handler
const sendErrorResponse = (res, statusCode, message) => {
  res.status(statusCode).json({ success: false, message });
};

// --- School Routes ---
app.get('/api/schools', async (req, res, next) => {
  try {
    const { query, sort, pagination } = applyQueryParams(School, req);
    const [schools, totalItems] = await Promise.all([
      School.find(query).sort(sort).skip(pagination.skip).limit(pagination.limit),
      School.countDocuments(query)
    ]);
    pagination.totalItems = totalItems;
    pagination.totalPages = Math.ceil(totalItems / pagination.limit);
    sendSuccessResponse(res, { schools, pagination });
  } catch (err) {
    next(err); // Pass error to global error handler
  }
});

app.get('/api/schools/:id', async (req, res, next) => {
  try {
    const school = await School.findById(req.params.id);
    if (!school) {
      return sendErrorResponse(res, 404, 'School not found');
    }
    sendSuccessResponse(res, school);
  } catch (err) {
    next(err);
  }
});

app.post('/api/schools', async (req, res, next) => {
  try {
    const newSchool = new School(req.body);
    const savedSchool = await newSchool.save();
    sendSuccessResponse(res, savedSchool, 'School created successfully');
  } catch (err) {
    // Handle Mongoose validation errors
    if (err.name === 'ValidationError') {
      const messages = Object.values(err.errors).map(val => val.message);
      return sendErrorResponse(res, 400, messages.join(', '));
    }
    if (err.code === 11000) { // Duplicate key error
      return sendErrorResponse(res, 400, 'School with this name already exists.');
    }
    next(err);
  }
});

app.put('/api/schools/:id', async (req, res, next) => {
  try {
    const updatedSchool = await School.findByIdAndUpdate(
      req.params.id,
      req.body,
      { new: true, runValidators: true } // Return new doc and run schema validators
    );
    if (!updatedSchool) {
      return sendErrorResponse(res, 404, 'School not found');
    }
    sendSuccessResponse(res, updatedSchool, 'School updated successfully');
  } catch (err) {
    if (err.name === 'ValidationError') {
      const messages = Object.values(err.errors).map(val => val.message);
      return sendErrorResponse(res, 400, messages.join(', '));
    }
    if (err.code === 11000) { // Duplicate key error
      return sendErrorResponse(res, 400, 'School with this name already exists.');
    }
    next(err);
  }
});

app.delete('/api/schools/:id', async (req, res, next) => {
  try {
    const deletedSchool = await School.findByIdAndDelete(req.params.id);
    if (!deletedSchool) {
      return sendErrorResponse(res, 404, 'School not found');
    }
    sendSuccessResponse(res, null, 'School deleted successfully');
  } catch (err) {
    next(err);
  }
});

// --- Tender Routes ---
app.get('/api/tenders', async (req, res, next) => {
  try {
    const { query, sort, pagination } = applyQueryParams(Tender, req);
    const [tenders, totalItems] = await Promise.all([
      Tender.find(query).sort(sort).skip(pagination.skip).limit(pagination.limit),
      Tender.countDocuments(query)
    ]);
    pagination.totalItems = totalItems;
    pagination.totalPages = Math.ceil(totalItems / pagination.limit);
    sendSuccessResponse(res, { tenders, pagination });
  } catch (err) {
    next(err);
  }
});

app.get('/api/tenders/:id', async (req, res, next) => {
  try {
    const tender = await Tender.findById(req.params.id);
    if (!tender) return sendErrorResponse(res, 404, 'Tender not found');
    sendSuccessResponse(res, tender);
  } catch (err) {
    next(err);
  }
});

app.post('/api/tenders', async (req, res, next) => {
  try {
    const newTender = new Tender(req.body);
    const savedTender = await newTender.save();
    sendSuccessResponse(res, savedTender, 'Tender created successfully');
  } catch (err) {
    if (err.name === 'ValidationError') {
      const messages = Object.values(err.errors).map(val => val.message);
      return sendErrorResponse(res, 400, messages.join(', '));
    }
    if (err.code === 11000) {
      return sendErrorResponse(res, 400, 'Tender with this ID already exists.');
    }
    next(err);
  }
});

app.put('/api/tenders/:id', async (req, res, next) => {
  try {
    const updatedTender = await Tender.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true });
    if (!updatedTender) return sendErrorResponse(res, 404, 'Tender not found');
    sendSuccessResponse(res, updatedTender, 'Tender updated successfully');
  } catch (err) {
    if (err.name === 'ValidationError') {
      const messages = Object.values(err.errors).map(val => val.message);
      return sendErrorResponse(res, 400, messages.join(', '));
    }
    if (err.code === 11000) {
      return sendErrorResponse(res, 400, 'Tender with this ID already exists.');
    }
    next(err);
  }
});

app.delete('/api/tenders/:id', async (req, res, next) => {
  try {
    const deletedTender = await Tender.findByIdAndDelete(req.params.id);
    if (!deletedTender) return sendErrorResponse(res, 404, 'Tender not found');
    sendSuccessResponse(res, null, 'Tender deleted successfully');
  } catch (err) {
    next(err);
  }
});

// --- Product Routes ---
app.get('/api/products', async (req, res, next) => {
  try {
    const { query, sort, pagination } = applyQueryParams(Product, req);
    const [products, totalItems] = await Promise.all([
      Product.find(query).sort(sort).skip(pagination.skip).limit(pagination.limit),
      Product.countDocuments(query)
    ]);
    pagination.totalItems = totalItems;
    pagination.totalPages = Math.ceil(totalItems / pagination.limit);
    sendSuccessResponse(res, { products, pagination });
  } catch (err) {
    next(err);
  }
});

app.get('/api/products/:id', async (req, res, next) => {
  try {
    const product = await Product.findById(req.params.id);
    if (!product) return sendErrorResponse(res, 404, 'Product not found');
    sendSuccessResponse(res, product);
  } catch (err) {
    next(err);
  }
});

app.post('/api/products', async (req, res, next) => {
  try {
    const newProduct = new Product(req.body);
    const savedProduct = await newProduct.save();
    sendSuccessResponse(res, savedProduct, 'Product created successfully');
  } catch (err) {
    if (err.name === 'ValidationError') {
      const messages = Object.values(err.errors).map(val => val.message);
      return sendErrorResponse(res, 400, messages.join(', '));
    }
    if (err.code === 11000) {
      return sendErrorResponse(res, 400, 'Product with this item name already exists.');
    }
    next(err);
  }
});

app.put('/api/products/:id', async (req, res, next) => {
  try {
    const updatedProduct = await Product.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true });
    if (!updatedProduct) return sendErrorResponse(res, 404, 'Product not found');
    sendSuccessResponse(res, updatedProduct, 'Product updated successfully');
  } catch (err) {
    if (err.name === 'ValidationError') {
      const messages = Object.values(err.errors).map(val => val.message);
      return sendErrorResponse(res, 400, messages.join(', '));
    }
    if (err.code === 11000) {
      return sendErrorResponse(res, 400, 'Product with this item name already exists.');
    }
    next(err);
  }
});

app.delete('/api/products/:id', async (req, res, next) => {
  try {
    const deletedProduct = await Product.findByIdAndDelete(req.params.id);
    if (!deletedProduct) return sendErrorResponse(res, 404, 'Product not found');
    sendSuccessResponse(res, null, 'Product deleted successfully');
  } catch (err) {
    next(err);
  }
});

// --- Bid Routes ---
app.get('/api/bids', async (req, res, next) => {
  try {
    const { query, sort, pagination } = applyQueryParams(Bid, req);
    const [bids, totalItems] = await Promise.all([
      Bid.find(query).sort(sort).skip(pagination.skip).limit(pagination.limit),
      Bid.countDocuments(query)
    ]);
    pagination.totalItems = totalItems;
    pagination.totalPages = Math.ceil(totalItems / pagination.limit);
    sendSuccessResponse(res, { bids, pagination });
  } catch (err) {
    next(err);
  }
});

app.get('/api/bids/:id', async (req, res, next) => {
  try {
    const bid = await Bid.findById(req.params.id);
    if (!bid) return sendErrorResponse(res, 404, 'Bid not found');
    sendSuccessResponse(res, bid);
  } catch (err) {
    next(err);
  }
});

app.post('/api/bids', async (req, res, next) => {
  try {
    const newBid = new Bid(req.body);
    const savedBid = await newBid.save();
    sendSuccessResponse(res, savedBid, 'Bid created successfully');
  } catch (err) {
    if (err.name === 'ValidationError') {
      const messages = Object.values(err.errors).map(val => val.message);
      return sendErrorResponse(res, 400, messages.join(', '));
    }
    if (err.code === 11000) {
      return sendErrorResponse(res, 400, 'A bid with this tender and vendor already exists.'); // Or adjust based on your unique key
    }
    next(err);
  }
});

app.put('/api/bids/:id', async (req, res, next) => {
  try {
    const updatedBid = await Bid.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true });
    if (!updatedBid) return sendErrorResponse(res, 404, 'Bid not found');
    sendSuccessResponse(res, updatedBid, 'Bid updated successfully');
  } catch (err) {
    if (err.name === 'ValidationError') {
      const messages = Object.values(err.errors).map(val => val.message);
      return sendErrorResponse(res, 400, messages.join(', '));
    }
    if (err.code === 11000) {
      return sendErrorResponse(res, 400, 'A bid with this tender and vendor already exists.');
    }
    next(err);
  }
});

app.delete('/api/bids/:id', async (req, res, next) => {
  try {
    const deletedBid = await Bid.findByIdAndDelete(req.params.id);
    if (!deletedBid) return sendErrorResponse(res, 404, 'Bid not found');
    sendSuccessResponse(res, null, 'Bid deleted successfully');
  } catch (err) {
    next(err);
  }
});

// --- Vendor Routes ---
app.get('/api/vendors', async (req, res, next) => {
  try {
    const { query, sort, pagination } = applyQueryParams(Vendor, req);
    const [vendors, totalItems] = await Promise.all([
      Vendor.find(query).sort(sort).skip(pagination.skip).limit(pagination.limit),
      Vendor.countDocuments(query)
    ]);
    pagination.totalItems = totalItems;
    pagination.totalPages = Math.ceil(totalItems / pagination.limit);
    sendSuccessResponse(res, { vendors, pagination });
  } catch (err) {
    next(err);
  }
});

app.get('/api/vendors/:id', async (req, res, next) => {
  try {
    const vendor = await Vendor.findById(req.params.id);
    if (!vendor) return sendErrorResponse(res, 404, 'Vendor not found');
    sendSuccessResponse(res, vendor);
  } catch (err) {
    next(err);
  }
});

app.post('/api/vendors', async (req, res, next) => {
  try {
    const newVendor = new Vendor(req.body);
    const savedVendor = await newVendor.save();
    sendSuccessResponse(res, savedVendor, 'Vendor created successfully');
  } catch (err) {
    if (err.name === 'ValidationError') {
      const messages = Object.values(err.errors).map(val => val.message);
      return sendErrorResponse(res, 400, messages.join(', '));
    }
    if (err.code === 11000) {
      return sendErrorResponse(res, 400, 'Vendor with this name already exists.');
    }
    next(err);
  }
});

app.put('/api/vendors/:id', async (req, res, next) => {
  try {
    const updatedVendor = await Vendor.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true });
    if (!updatedVendor) return sendErrorResponse(res, 404, 'Vendor not found');
    sendSuccessResponse(res, updatedVendor, 'Vendor updated successfully');
  } catch (err) {
    if (err.name === 'ValidationError') {
      const messages = Object.values(err.errors).map(val => val.message);
      return sendErrorResponse(res, 400, messages.join(', '));
    }
    if (err.code === 11000) {
      return sendErrorResponse(res, 400, 'Vendor with this name already exists.');
    }
    next(err);
  }
});

app.delete('/api/vendors/:id', async (req, res, next) => {
  try {
    const deletedVendor = await Vendor.findByIdAndDelete(req.params.id);
    if (!deletedVendor) return sendErrorResponse(res, 404, 'Vendor not found');
    sendSuccessResponse(res, null, 'Vendor deleted successfully');
  } catch (err) {
    next(err);
  }
});

// --- Logistics Routes ---
app.get('/api/logistics', async (req, res, next) => {
  try {
    const { query, sort, pagination } = applyQueryParams(Logistics, req);
    const [logistics, totalItems] = await Promise.all([
      Logistics.find(query).sort(sort).skip(pagination.skip).limit(pagination.limit),
      Logistics.countDocuments(query)
    ]);
    pagination.totalItems = totalItems;
    pagination.totalPages = Math.ceil(totalItems / pagination.limit);
    sendSuccessResponse(res, { logistics, pagination });
  } catch (err) {
    next(err);
  }
});

app.get('/api/logistics/:id', async (req, res, next) => {
  try {
    const logistics = await Logistics.findById(req.params.id);
    if (!logistics) return sendErrorResponse(res, 404, 'Logistics provider not found');
    sendSuccessResponse(res, logistics);
  } catch (err) {
    next(err);
  }
});

app.post('/api/logistics', async (req, res, next) => {
  try {
    const newLogistics = new Logistics(req.body);
    const savedLogistics = await newLogistics.save();
    sendSuccessResponse(res, savedLogistics, 'Logistics provider created successfully');
  } catch (err) {
    if (err.name === 'ValidationError') {
      const messages = Object.values(err.errors).map(val => val.message);
      return sendErrorResponse(res, 400, messages.join(', '));
    }
    if (err.code === 11000) {
      return sendErrorResponse(res, 400, 'Logistics provider with this name already exists.');
    }
    next(err);
  }
});

app.put('/api/logistics/:id', async (req, res, next) => {
  try {
    const updatedLogistics = await Logistics.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true });
    if (!updatedLogistics) return sendErrorResponse(res, 404, 'Logistics provider not found');
    sendSuccessResponse(res, updatedLogistics, 'Logistics provider updated successfully');
  } catch (err) {
    if (err.name === 'ValidationError') {
      const messages = Object.values(err.errors).map(val => val.message);
      return sendErrorResponse(res, 400, messages.join(', '));
    }
    if (err.code === 11000) {
      return sendErrorResponse(res, 400, 'Logistics provider with this name already exists.');
    }
    next(err);
  }
});

app.delete('/api/logistics/:id', async (req, res, next) => {
  try {
    const deletedLogistics = await Logistics.findByIdAndDelete(req.params.id);
    if (!deletedLogistics) return sendErrorResponse(res, 404, 'Logistics provider not found');
    sendSuccessResponse(res, null, 'Logistics provider deleted successfully');
  } catch (err) {
    next(err);
  }
});

// --- Contact Routes ---
app.get('/api/contacts', async (req, res, next) => {
  try {
    const { query, sort, pagination } = applyQueryParams(Contact, req);
    const [contacts, totalItems] = await Promise.all([
      Contact.find(query).sort(sort).skip(pagination.skip).limit(pagination.limit),
      Contact.countDocuments(query)
    ]);
    pagination.totalItems = totalItems;
    pagination.totalPages = Math.ceil(totalItems / pagination.limit);
    sendSuccessResponse(res, { contacts, pagination });
  } catch (err) {
    next(err);
  }
});

app.get('/api/contacts/:id', async (req, res, next) => {
  try {
    const contact = await Contact.findById(req.params.id);
    if (!contact) return sendErrorResponse(res, 404, 'Contact not found');
    sendSuccessResponse(res, contact);
  } catch (err) {
    next(err);
  }
});

app.post('/api/contacts', async (req, res, next) => {
  try {
    const newContact = new Contact(req.body);
    const savedContact = await newContact.save();
    sendSuccessResponse(res, savedContact, 'Contact created successfully');
  } catch (err) {
    if (err.name === 'ValidationError') {
      const messages = Object.values(err.errors).map(val => val.message);
      return sendErrorResponse(res, 400, messages.join(', '));
    }
    if (err.code === 11000) {
      return sendErrorResponse(res, 400, 'Contact with this email already exists.');
    }
    next(err);
  }
});

app.put('/api/contacts/:id', async (req, res, next) => {
  try {
    const updatedContact = await Contact.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true });
    if (!updatedContact) return sendErrorResponse(res, 404, 'Contact not found');
    sendSuccessResponse(res, updatedContact, 'Contact updated successfully');
  } catch (err) {
    if (err.name === 'ValidationError') {
      const messages = Object.values(err.errors).map(val => val.message);
      return sendErrorResponse(res, 400, messages.join(', '));
    }
    if (err.code === 11000) {
      return sendErrorResponse(res, 400, 'Contact with this email already exists.');
    }
    next(err);
  }
});

app.delete('/api/contacts/:id', async (req, res, next) => {
  try {
    const deletedContact = await Contact.findByIdAndDelete(req.params.id);
    if (!deletedContact) {
      return sendErrorResponse(res, 404, 'Contact not found');
    }
    sendSuccessResponse(res, null, 'Contact deleted successfully');
  } catch (err) {
    next(err);
  }
});


// --- Dashboard Metrics (Existing but kept for completeness) ---
app.get('/api/dashboard/metrics', async (req, res, next) => {
  try {
    const totalSchools = await School.countDocuments();
    const totalTenders = await Tender.countDocuments();
    const openTenders = await Tender.countDocuments({ status: 'Open' });
    const totalProducts = await Product.countDocuments();
    const totalBids = await Bid.countDocuments();
    const totalVendors = await Vendor.countDocuments();
    const totalLogistics = await Logistics.countDocuments();
    const totalContacts = await Contact.countDocuments();

    sendSuccessResponse(res, {
      totalSchools,
      totalTenders,
      openTenders,
      totalProducts,
      totalBids,
      totalVendors,
      totalLogistics,
      totalContacts,
    });
  } catch (err) {
    next(err);
  }
});

// --- Recent Activity (Example, extend as needed) ---
app.get('/api/dashboard/recent-activity', async (req, res, next) => {
  try {
    // Fetch recent activities from various collections
    const recentTenders = await Tender.find().sort({ createdAt: -1 }).limit(5);
    const recentBids = await Bid.find().sort({ createdAt: -1 }).limit(5).populate('tender_id vendor_id'); // Populate references
    const recentSchools = await School.find().sort({ createdAt: -1 }).limit(5);

    sendSuccessResponse(res, { recentTenders, recentBids, recentSchools });
  } catch (err) {
    next(err);
  }
});


// --- Serve Frontend in Production ---
// All other GET requests not handled by the API will return your React app
if (process.env.NODE_ENV === 'production') {
  app.get('*', (req, res) => {
    res.sendFile(path.resolve(__dirname, '../../jnv-supplies-frontend/build', 'index.html'));
  });
}


// --- Global Error Handling Middleware ---
// This middleware will catch any errors passed to `next(err)`
app.use((err, req, res, next) => {
  console.error(err.stack); // Log the error stack for debugging

  let statusCode = err.statusCode || 500;
  let message = err.message || 'Something went wrong on the server!';

  // Handle specific Mongoose errors
  if (err.name === 'CastError') {
    message = `Resource not found with id of ${err.value}`;
    statusCode = 404;
  }
  if (err.code === 11000) { // MongoDB duplicate key error
    message = `Duplicate field value entered: ${Object.keys(err.keyValue)[0]} already exists.`;
    statusCode = 400;
  }
  if (err.name === 'ValidationError') { // Mongoose validation error
    message = Object.values(err.errors).map(val => val.message).join(', ');
    statusCode = 400;
  }

  // Send a standardized error response
  sendErrorResponse(res, statusCode, message);
});


// Start the server
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
  console.log(`Frontend URL: ${process.env.FRONTEND_URL}`);
  console.log(`Environment: ${process.env.NODE_ENV}`);
});